#!/usr/bin/env ruby
# frozen_string_literal: true

# Helper method to wrap text with ANSI escape codes
def ansi_wrap(text, color_code) = "\e[#{color_code}m#{text}\e[0m"

def ansi_escape(a)
  color, *tail = a
  tail.map { ansi_wrap(_1.is_a?(Array) ? ansi_escape(_1) : _1, color) }.join
end

def log(...)
  puts ansi_escape(...)
end

# Color variables (safe on both white and black backgrounds)
green   = 32
blue    = 34
magenta = 35
yellow  = 33
bold    = 1

require "bundler/setup"
require "app_query"

# You can add fixtures and/or initialization code here to make experimenting
# with your gem easier. You can also use a different console, if you like.

puts ansi_escape([magenta, "👋 Welcome to ", [bold, "AppQuery"], " - Turning 🥦 raw queries into 🍜"])


# `env DATABASE_URL= console` skips db-setup
if url = (ARGV.shift || (!ENV["DATABASE_URL"]&.empty? && ENV["DATABASE_URL"]))
  log [yellow, "🔌 Connecting to #{url.inspect}... 🚀"]
  ActiveRecord::Base.logger = Logger.new(STDOUT)

  ActiveRecord::Base.establish_connection(url:)
else
  log [blue, "❌ ENV['DATABASE_URL'] not found - skipping database setup."]
MSG
end

def reload!
  load Bundler.root.join("lib/app_query.rb").to_s
end
log [yellow, "🛠️ Use `reload!` after making code changes"]

# not meant as a helper
undef :ansi_wrap, :ansi_escape
require "irb"
IRB.start(__FILE__)
